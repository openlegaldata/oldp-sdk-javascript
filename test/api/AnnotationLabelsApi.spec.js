/**
 * Open Legal Data API
 * With the Open Legal Data API you can access various data from the legal domain, e.g. law text or case files. The data may be used for semantic analysis or to create statistics. For more information visit our website. https://openlegaldata.io/
 *
 * OpenAPI spec version: v1
 * Contact: hello@openlegaldata.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenLegalDataJavaScriptApi);
  }
}(this, function(expect, OpenLegalDataJavaScriptApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenLegalDataJavaScriptApi.AnnotationLabelsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AnnotationLabelsApi', function() {
    describe('annotationLabelsCreate', function() {
      it('should call annotationLabelsCreate successfully', function(done) {
        //uncomment below and update the code to test annotationLabelsCreate
        //instance.annotationLabelsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('annotationLabelsDelete', function() {
      it('should call annotationLabelsDelete successfully', function(done) {
        //uncomment below and update the code to test annotationLabelsDelete
        //instance.annotationLabelsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('annotationLabelsList', function() {
      it('should call annotationLabelsList successfully', function(done) {
        //uncomment below and update the code to test annotationLabelsList
        //instance.annotationLabelsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('annotationLabelsPartialUpdate', function() {
      it('should call annotationLabelsPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test annotationLabelsPartialUpdate
        //instance.annotationLabelsPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('annotationLabelsRead', function() {
      it('should call annotationLabelsRead successfully', function(done) {
        //uncomment below and update the code to test annotationLabelsRead
        //instance.annotationLabelsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('annotationLabelsUpdate', function() {
      it('should call annotationLabelsUpdate successfully', function(done) {
        //uncomment below and update the code to test annotationLabelsUpdate
        //instance.annotationLabelsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
