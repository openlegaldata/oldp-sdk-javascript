/**
 * Open Legal Data API
 * With the Open Legal Data API you can access various data from the legal domain, e.g. law text or case files. The data may be used for semantic analysis or to create statistics. For more information visit our website. https://openlegaldata.io/
 *
 * OpenAPI spec version: v1
 * Contact: hello@openlegaldata.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenLegalDataJavaScriptApi);
  }
}(this, function(expect, OpenLegalDataJavaScriptApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenLegalDataJavaScriptApi.LawsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LawsApi', function() {
    describe('lawsCreate', function() {
      it('should call lawsCreate successfully', function(done) {
        //uncomment below and update the code to test lawsCreate
        //instance.lawsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lawsDelete', function() {
      it('should call lawsDelete successfully', function(done) {
        //uncomment below and update the code to test lawsDelete
        //instance.lawsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lawsList', function() {
      it('should call lawsList successfully', function(done) {
        //uncomment below and update the code to test lawsList
        //instance.lawsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lawsPartialUpdate', function() {
      it('should call lawsPartialUpdate successfully', function(done) {
        //uncomment below and update the code to test lawsPartialUpdate
        //instance.lawsPartialUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lawsRead', function() {
      it('should call lawsRead successfully', function(done) {
        //uncomment below and update the code to test lawsRead
        //instance.lawsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lawsSearchList', function() {
      it('should call lawsSearchList successfully', function(done) {
        //uncomment below and update the code to test lawsSearchList
        //instance.lawsSearchList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lawsUpdate', function() {
      it('should call lawsUpdate successfully', function(done) {
        //uncomment below and update the code to test lawsUpdate
        //instance.lawsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
