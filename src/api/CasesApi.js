/**
 * Open Legal Data API
 * With the Open Legal Data API you can access various data from the legal domain, e.g. law text or case files. The data may be used for semantic analysis or to create statistics. For more information visit our website. https://openlegaldata.io/
 *
 * OpenAPI spec version: v1
 * Contact: hello@openlegaldata.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/InlineResponse2003', 'model/InlineResponse2004', 'model/ModelCase'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/InlineResponse2003'), require('../model/InlineResponse2004'), require('../model/ModelCase'));
  } else {
    // Browser globals (root is window)
    if (!root.OldpApi) {
      root.OldpApi = {};
    }
    root.OldpApi.CasesApi = factory(root.OldpApi.ApiClient, root.OldpApi.InlineResponse2003, root.OldpApi.InlineResponse2004, root.OldpApi.ModelCase);
  }
}(this, function(ApiClient, InlineResponse2003, InlineResponse2004, ModelCase) {
  'use strict';

  /**
   * Cases service.
   * @module api/CasesApi
   * @version v1
   */

  /**
   * Constructs a new CasesApi. 
   * @alias module:api/CasesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the casesCreate operation.
     * @callback module:api/CasesApi~casesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List view for cases
     * @param {module:model/ModelCase} data 
     * @param {module:api/CasesApi~casesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelCase}
     */
    this.casesCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling casesCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelCase;

      return this.apiClient.callApi(
        '/cases/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the casesDelete operation.
     * @callback module:api/CasesApi~casesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List view for cases
     * @param {Number} id A unique integer value identifying this case.
     * @param {module:api/CasesApi~casesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.casesDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling casesDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cases/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the casesList operation.
     * @callback module:api/CasesApi~casesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List view for cases
     * @param {Object} opts Optional parameters
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {String} opts._date 
     * @param {String} opts.slug 
     * @param {String} opts.fileNumber 
     * @param {String} opts.ecli 
     * @param {Number} opts.court 
     * @param {String} opts.courtSlug 
     * @param {String} opts.courtJurisdiction 
     * @param {String} opts.courtLevelOfAppeal 
     * @param {String} opts.courtState 
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/CasesApi~casesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.casesList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ordering': opts['ordering'],
        'date': opts['_date'],
        'slug': opts['slug'],
        'file_number': opts['fileNumber'],
        'ecli': opts['ecli'],
        'court': opts['court'],
        'court__slug': opts['courtSlug'],
        'court__jurisdiction': opts['courtJurisdiction'],
        'court__level_of_appeal': opts['courtLevelOfAppeal'],
        'court__state': opts['courtState'],
        'page': opts['page'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/cases/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the casesPartialUpdate operation.
     * @callback module:api/CasesApi~casesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List view for cases
     * @param {Number} id A unique integer value identifying this case.
     * @param {module:model/ModelCase} data 
     * @param {module:api/CasesApi~casesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelCase}
     */
    this.casesPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling casesPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling casesPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelCase;

      return this.apiClient.callApi(
        '/cases/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the casesRead operation.
     * @callback module:api/CasesApi~casesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List view for cases
     * @param {Number} id A unique integer value identifying this case.
     * @param {module:api/CasesApi~casesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelCase}
     */
    this.casesRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling casesRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelCase;

      return this.apiClient.callApi(
        '/cases/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the casesSearchList operation.
     * @callback module:api/CasesApi~casesSearchListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search view (list only)
     * @param {String} text Search query on text content (Lucence syntax support).
     * @param {Object} opts Optional parameters
     * @param {String} opts.facetModelName facet_model_name
     * @param {String} opts._date date
     * @param {String} opts.courtJurisdiction court_jurisdiction
     * @param {String} opts.courtLevelOfAppeal court_level_of_appeal
     * @param {String} opts.decisionType decision_type
     * @param {String} opts.court court
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/CasesApi~casesSearchListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2004}
     */
    this.casesSearchList = function(text, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling casesSearchList");
      }


      var pathParams = {
      };
      var queryParams = {
        'text': text,
        'facet_model_name': opts['facetModelName'],
        'date': opts['_date'],
        'court_jurisdiction': opts['courtJurisdiction'],
        'court_level_of_appeal': opts['courtLevelOfAppeal'],
        'decision_type': opts['decisionType'],
        'court': opts['court'],
        'page': opts['page'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/cases/search/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the casesUpdate operation.
     * @callback module:api/CasesApi~casesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelCase} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List view for cases
     * @param {Number} id A unique integer value identifying this case.
     * @param {module:model/ModelCase} data 
     * @param {module:api/CasesApi~casesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelCase}
     */
    this.casesUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling casesUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling casesUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ModelCase;

      return this.apiClient.callApi(
        '/cases/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
