/**
 * Open Legal Data API
 * With the Open Legal Data API you can access various data from the legal domain, e.g. law text or case files. The data may be used for semantic analysis or to create statistics. For more information visit our website. https://openlegaldata.io/
 *
 * OpenAPI spec version: v1
 * Contact: hello@openlegaldata.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.OldpApi) {
      root.OldpApi = {};
    }
    root.OldpApi.AnnotationLabel = factory(root.OldpApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The AnnotationLabel model module.
   * @module model/AnnotationLabel
   * @version v1
   */

  /**
   * Constructs a new <code>AnnotationLabel</code>.
   * @alias module:model/AnnotationLabel
   * @class
   * @param name {String} Verbose name, e.g. This Awesome annotation
   * @param slug {String} Identifier, e.g. this-awesome-annotation
   */
  var exports = function(name, slug) {
    var _this = this;




    _this['name'] = name;
    _this['slug'] = slug;







  };

  /**
   * Constructs a <code>AnnotationLabel</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AnnotationLabel} obj Optional instance to populate.
   * @return {module:model/AnnotationLabel} The populated <code>AnnotationLabel</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('owner')) {
        obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
      }
      if (data.hasOwnProperty('trusted')) {
        obj['trusted'] = ApiClient.convertToType(data['trusted'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('slug')) {
        obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
      }
      if (data.hasOwnProperty('private')) {
        obj['private'] = ApiClient.convertToType(data['private'], 'Boolean');
      }
      if (data.hasOwnProperty('many_annotations_per_label')) {
        obj['many_annotations_per_label'] = ApiClient.convertToType(data['many_annotations_per_label'], 'Boolean');
      }
      if (data.hasOwnProperty('use_marker')) {
        obj['use_marker'] = ApiClient.convertToType(data['use_marker'], 'Boolean');
      }
      if (data.hasOwnProperty('annotation_value_type')) {
        obj['annotation_value_type'] = ApiClient.convertToType(data['annotation_value_type'], 'String');
      }
      if (data.hasOwnProperty('color')) {
        obj['color'] = ApiClient.convertToType(data['color'], 'String');
      }
      if (data.hasOwnProperty('created_at')) {
        obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
      }
      if (data.hasOwnProperty('updated_at')) {
        obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
      }
    }
    return obj;
  }

  /**
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * @member {String} owner
   */
  exports.prototype['owner'] = undefined;
  /**
   * @member {String} trusted
   */
  exports.prototype['trusted'] = undefined;
  /**
   * Verbose name, e.g. This Awesome annotation
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Identifier, e.g. this-awesome-annotation
   * @member {String} slug
   */
  exports.prototype['slug'] = undefined;
  /**
   * Private annotations are only visible to its author
   * @member {Boolean} private
   */
  exports.prototype['private'] = undefined;
  /**
   * A content object can have more than one annotation per label
   * @member {Boolean} many_annotations_per_label
   */
  exports.prototype['many_annotations_per_label'] = undefined;
  /**
   * Marker annotations are extracted from the text content and have a position in the text
   * @member {Boolean} use_marker
   */
  exports.prototype['use_marker'] = undefined;
  /**
   * Annotation values must be in this data type
   * @member {module:model/AnnotationLabel.AnnotationValueTypeEnum} annotation_value_type
   */
  exports.prototype['annotation_value_type'] = undefined;
  /**
   * @member {String} color
   */
  exports.prototype['color'] = undefined;
  /**
   * Entry is created at this date time
   * @member {Date} created_at
   */
  exports.prototype['created_at'] = undefined;
  /**
   * Date time of last change
   * @member {Date} updated_at
   */
  exports.prototype['updated_at'] = undefined;


  /**
   * Allowed values for the <code>annotation_value_type</code> property.
   * @enum {String}
   * @readonly
   */
  exports.AnnotationValueTypeEnum = {
    /**
     * value: "str"
     * @const
     */
    "str": "str",
    /**
     * value: "int"
     * @const
     */
    "int": "int"  };


  return exports;
}));


